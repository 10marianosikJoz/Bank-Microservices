version: '3.8'

networks:
  marjoz:
    name: "marjoz"
    driver: "bridge"

services:

  kafka:
    image: docker.io/bitnami/kafka:3.9
    ports:
      - "9092:9092"
#    volumes:
#      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    extends:
      file: common-configuration.yml
      service: network-deploy-service

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.7
    container_name: keycloak
    ports:
      - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev"
    extends:
      file: common-configuration.yml
      service: network-deploy-service

  read:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yml:/etc/loki/config.yml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      marjoz:
        aliases:
          - loki

  write:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:v1.5.1
    volumes:
      - ../observability/alloy/alloy-local-config.yml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common-configuration.yml
      service: network-deploy-service

  minio:
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-configuration.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-configuration.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo:2.6.1
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4318:4318"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-configuration.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:11.4.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana:/etc/grafana/provisioning/datasources
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-configuration.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:3.1.2
    volumes:
      - ../observability/loki/loki-config.yml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-configuration.yml
      service: network-deploy-service

  gateway:
    image: nginx:1.27.3
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-configuration.yml
      service: network-deploy-service
  redis:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    extends:
      file: common-configuration.yml
      service: network-deploy-service

  accountsdb:
    container_name: accountsdb
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: accountsdb
    extends:
      file: common-configuration.yml
      service: microservice-database-config
    networks:
      - marjoz

  loansdb:
    container_name: loansdb
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: loansdb
    extends:
      file: common-configuration.yml
      service: microservice-database-config
    networks:
      - marjoz

  cardsdb:
    container_name: cardsdb
    ports:
      - "3308:3306"
    environment:
      MYSQL_DATABASE: cardsdb
    extends:
      file: common-configuration.yml
      service: microservice-database-config
    networks:
      - marjoz

  configserver:
    image: "marjoz/configserver:latest"
    container_name: config-server-microservice
    ports:
      - "8071:8071"
    environment:
      OTEL_SERVICE_NAME: "configserver"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-configuration.yml
      service: microservice-base-configuration
    networks:
      - marjoz

  servicediscovery:
    image: "marjoz/servicediscovery:latest"
    container_name: service-discovery-microservice
    ports:
      - "8761:8761"
    environment:
      SPRING_APPLICATION_NAME: "servicediscovery"
      OTEL_SERVICE_NAME: "servicediscovery"
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-configuration.yml
      service: microservice-configserver-configuration

    networks:
      - marjoz

  account:
    image: "marjoz/account:latest"
    container_name: account-microservice
    environment:
      SPRING_APPLICATION_NAME: "account"
      SPRING_DATASOURCE_URL: "jdbc:mysql://accountsdb:3306/accountsdb"
      OTEL_SERVICE_NAME: "account"
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    depends_on:
      accountsdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      servicediscovery:
        condition: service_healthy
    extends:
      file: common-configuration.yml
      service: microservice-servicediscovery-configuration
    networks:
      - marjoz

  card:
    image: "marjoz/card:latest"
    container_name: card-microservice
    environment:
      SPRING_APPLICATION_NAME: "card"
      SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3306/cardsdb"
      OTEL_SERVICE_NAME: "card"
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    depends_on:
      cardsdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      servicediscovery:
        condition: service_healthy
    extends:
      file: common-configuration.yml
      service: microservice-servicediscovery-configuration
    networks:
      - marjoz

  loan:
    image: "marjoz/loan:latest"
    container_name: loan-microservice
    environment:
      SPRING_APPLICATION_NAME: "loan"
      SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3306/loansdb"
      OTEL_SERVICE_NAME: "loan"
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    depends_on:
      loansdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      servicediscovery:
        condition: service_healthy
    extends:
      file: common-configuration.yml
      service: microservice-servicediscovery-configuration
    networks:
      - marjoz

  notification:
    image: "marjoz/notification:latest"
    container_name: notification-microservice
    environment:
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    extends:
      file: common-configuration.yml
      service: network-deploy-service

  apigateway:
    image: "marjoz/apigateway:latest"
    container_name: api-gateway-microservice
    ports:
      - "8072:8072"
    environment:
      SPRING_APPLICATION_NAME: "apigateway"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      OTEL_SERVICE_NAME: "apigateway"
    depends_on:
      account:
        condition: service_healthy
      loan:
        condition: service_healthy
      card:
        condition: service_healthy
      redis:
        condition: service_healthy
    extends:
      file: common-configuration.yml
      service: microservice-servicediscovery-configuration
    networks:
      - marjoz